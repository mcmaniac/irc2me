package Irc2me;

/*
 * Chat network
 *
 */

message Network
{
    // ID
    optional int64  id                      = 1;

    // status
    optional bool   online                  = 5;

    // network settings
    optional string name                    = 10;
    optional bool   reconnect               = 11;

    // Network identity
    message Identity
    {
        optional int64 id        = 1;

        optional string nick     = 10;
        repeated string nick_alt = 11;
        optional string name     = 12;
        optional string realname = 13;
    };

    optional Identity identity              = 12;

    // Server type
    message Server
    {
        optional string server_host = 1;
        optional int32  server_port = 2;
        optional bool   use_tls     = 10;
    };

    repeated Server servers                 = 20;

    /*
     * Chat messages from private queries and public channels
     *
     */

    // User of a message
    message User
    {
      required string nick = 1;
      optional string name = 2;
      optional string host = 3;

      enum Userflag
      {
        OPERATOR = 0;
        VOICE    = 1;
      };

      optional Userflag flag = 4;
    };

    message Message
    {
        enum Type
        {
            PRIVMSG = 0;
            JOIN    = 1;
            PART    = 2;
            INVITE  = 3;
            QUIT    = 4;
            KICK    = 5;
            NICK    = 6;
            NOTICE  = 7;
            TOPIC   = 8;
            MOTD    = 9;
        };

        oneof type {
            Type   known = 1;
            string other = 2;
        }

        // epoch timestamp in miliseconds
        optional uint64 timestamp   = 5;

        optional User   user        = 10;
        optional string server      = 11;

        optional string content     = 20;
    };

    enum Status
    {
        OFFLINE            = 1;
        ONLINE             = 2;
        NEWMESSAGES        = 3;
        NEWNOTIFICATIONS   = 4;
    };

    // Channels
    message Channel
    {
        optional int64   id       = 1;
        optional string  name     = 2;
        optional Status  status   = 3;

        repeated Message messages = 10;
        repeated User    users    = 20;
    };

    // Queries
    message Query
    {
        required User    user     = 1;
        optional Status  status   = 2;

        repeated Message messages = 10;
    };

    // Server messages
    repeated Message messages               = 30;

    // Private queries
    repeated Query   queries                = 40;

    // Public channels
    repeated Channel channels               = 50;
};

/*
 * Authentication
 *
 */

message Authentication
{
    required string login = 1;
    required string password = 2;
};

/*
 * Messages for both client -> server and server -> client
 *
 */

enum SystemMsg
{
    DISCONNECT = 0;
    PING       = 1;
    PONG       = 2;
};

/*
 * Client -> Server message
 *
 */

message ClientMsg
{
    optional int64        response_id   = 3;
    optional SystemMsg    system_msg    = 5;

    /*
     * GET API
     *
     */

    message GET
    {
        enum ListRequest
        {
            LIST_NETWORKS                   = 0;
            LIST_CONVERSATIONS              = 1;
        };

        optional ListRequest list           = 10;

        message BacklogRequest
        {
            optional uint64 before          = 1;
            optional uint64 after           = 2;
            optional uint32 limit           = 3;
            required int64  network_id      = 10;
            optional string query_nickname  = 20;
            optional string channel_name    = 30;
        };

        optional BacklogRequest backlogs    = 20;
    };

    optional GET get  = 10;

    /*
     * SEND API
     *
     */

    message SendMessage
    {
        optional Network.Message.Type type          = 1;
        optional string               type_raw      = 2;
        optional int64                network_id    = 3;

        optional Network.User         to_user       = 5;
        repeated string               params        = 15;
        optional string               content       = 20;
    };

    optional SendMessage send = 20;

    /*
     * STORE API
     *
     */

    message PUT
    {
        // repeated Network network = 1;
    };

    optional PUT put = 30;

    /*
     * DELETE API
     *
     */

    message DELETE
    {
        // repeated Network network = 1;
    };

    optional DELETE delete = 40;

    /*
     * UPDATE API
     *
     */

    message UPDATE
    {
        // repeated Network network = 1;
    };

    optional UPDATE update = 50;
};

/*
 * Server -> client message
 *
 */

message ServerMsg
{
    optional int64        response_id   = 3;
    optional SystemMsg    system_msg    = 5;

    enum ResponseCode
    {
        OK = 0;
        ERROR = 1;
    };

    // response messages
    optional ResponseCode response_code = 10;
    optional string       response_msg  = 15;

    // Identities
    //repeated Identity     identities = 20;

    // Networks
    repeated Network      networks = 50;
};
