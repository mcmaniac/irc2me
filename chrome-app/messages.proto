package Irc2me;

/*
 * Chat network
 *
 */

message Network
{
    // ID
    optional int64  id                      = 1;

    // status
    optional bool   online                  = 5;

    // network settings
    optional string name                    = 10;
    optional bool   reconnect               = 11;

    // Network identity
    message Identity
    {
        optional int64 id        = 1;

        optional string nick     = 10;
        repeated string nick_alt = 11;
        optional string name     = 12;
        optional string realname = 13;
    };

    optional Identity identity              = 12;

    // Server type
    message Server
    {
        optional string server_host = 1;
        optional int32  server_port = 2;
        optional bool   use_tls     = 10;
    };

    repeated Server servers                 = 20;

    /*
     * Chat messages from private queries and public channels
     *
     */

    message Message
    {
        enum Type
        {
            PRIVMSG = 0;
            JOIN    = 1;
            PART    = 2;
            INVITE  = 3;
            QUIT    = 4;
            KICK    = 5;
            NICK    = 6;
            NOTICE  = 7;
            TOPIC   = 8;
            MOTD    = 9;
        };

        oneof type {
            Type   known = 1;
            string other = 2;
        }

        // epoch timestamp in miliseconds
        optional uint64 timestamp = 5;

        // User of a message
        message User
        {
            optional string nick = 1;
            optional string name = 2;
            optional string host = 3;

            enum Userflag
            {
                OPERATOR = 0;
                VOICE    = 1;
            };

            optional Userflag flag = 4;
        };

        oneof from {
            User   user   = 10;
            string server = 11;
        }

        optional string content = 20;
    };

    // Channels
    message Channel
    {
        enum Status
        {
            OFFLINE            = 1;
            ONLINE             = 2;
            NEWMESSAGES        = 3;
            NEWNOTIFICATIONS   = 4;
        };

        optional int64   id       = 1;
        optional string  name     = 2;
        optional Status  status   = 3;

        repeated Message messages = 10;
    };

    repeated Channel channels               = 30;
    repeated Message messages               = 40;

};

/*
 * Authentication
 *
 */

message Authentication
{
    required string login = 1;
    required string password = 2;
};

/*
 * Messages for both client -> server and server -> client
 *
 */

enum SystemMsg
{
    DISCONNECT = 0;
    PING       = 1;
    PONG       = 2;
};

/*
 * Client -> Server message
 *
 */

message ClientMsg
{
    optional int64        response_id   = 3;
    optional SystemMsg    system_msg    = 5;

    /*
     * GET API
     *
     */

    message GET
    {
        repeated Network network = 1;
    };

    optional GET get  = 10;

    /*
     * SEND API
     *
     */

    message SEND
    {
        message PrivateMessage
        {
            optional Network.Message message      = 1;

            // send message to a channel with a known ID
            optional int64  to_channel_id = 10;

            // send message to a user nick or channel name
            optional string to_name       = 11;
        };

        repeated PrivateMessage messages = 1;

        /* Commands like:
         *
         *   /nick ...
         *   /msg user bla
         *   /join ...
         *
         * etc. (without the leading '/')
         */
        repeated string commands = 2;
    };

    optional SEND send = 20;

    /*
     * STORE API
     *
     */

    message PUT
    {
        // repeated Network network = 1;
    };

    optional PUT put = 30;

    /*
     * DELETE API
     *
     */

    message DELETE
    {
        // repeated Network network = 1;
    };

    optional DELETE delete = 40;

    /*
     * UPDATE API
     *
     */

    message UPDATE
    {
        // repeated Network network = 1;
    };

    optional UPDATE update = 50;
};

/*
 * Server -> client message
 *
 */

message ServerMsg
{
    optional int64        response_id   = 3;
    optional SystemMsg    system_msg    = 5;

    enum ResponseCode
    {
        OK = 0;
        ERROR = 1;
    };

    // response messages
    optional ResponseCode response_code = 10;
    optional string       response_msg  = 15;

    // Identities
    //repeated Identity     identities = 20;

    // Networks
    repeated Network      networks = 50;
};
